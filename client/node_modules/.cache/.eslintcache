[{"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\App.js":"3","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\store.js":"4","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\utils\\setChallengeToken.js":"5","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\utils\\setAuthToken.js":"6","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\socket.js":"7","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\challengeActions.js":"8","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\authActions.js":"9","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\layout\\Navbar.js":"10","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\layout\\Landing.js":"11","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\BugReport.js":"12","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\private-route\\PrivateRoute.js":"13","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\ChallengeSelect.js":"14","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\ChallengePage.js":"15","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\auth\\Register.js":"16","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\Dashboard.js":"17","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\auth\\Login.js":"18","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\types.js":"19","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\Timer.js":"20","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\CompTimer.js":"21","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\CheckInTimer.js":"22","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\index.js":"23","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\errorReducer.js":"24","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\authReducer.js":"25"},{"size":547,"mtime":1623709814856,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":2562,"mtime":1624744489919,"results":"29","hashOfConfig":"27"},{"size":372,"mtime":1621643767066,"results":"30","hashOfConfig":"27"},{"size":340,"mtime":1623435320786,"results":"31","hashOfConfig":"27"},{"size":369,"mtime":1624047231768,"results":"32","hashOfConfig":"27"},{"size":127,"mtime":1622844527550,"results":"33","hashOfConfig":"27"},{"size":1736,"mtime":1623806724200,"results":"34","hashOfConfig":"27"},{"size":3887,"mtime":1624923056406,"results":"35","hashOfConfig":"27"},{"size":542,"mtime":1623457236501,"results":"36","hashOfConfig":"27"},{"size":2458,"mtime":1624744448642,"results":"37","hashOfConfig":"27"},{"size":3031,"mtime":1624744369707,"results":"38","hashOfConfig":"27"},{"size":607,"mtime":1621644843465,"results":"39","hashOfConfig":"27"},{"size":2404,"mtime":1621721054971,"results":"40","hashOfConfig":"27"},{"size":38749,"mtime":1624926157314,"results":"41","hashOfConfig":"27"},{"size":5665,"mtime":1623790370900,"results":"42","hashOfConfig":"27"},{"size":33974,"mtime":1625012034124,"results":"43","hashOfConfig":"27"},{"size":4888,"mtime":1624648791548,"results":"44","hashOfConfig":"27"},{"size":221,"mtime":1622855536875,"results":"45","hashOfConfig":"27"},{"size":1662,"mtime":1624304347698,"results":"46","hashOfConfig":"27"},{"size":1359,"mtime":1624665694794,"results":"47","hashOfConfig":"27"},{"size":1383,"mtime":1623805229377,"results":"48","hashOfConfig":"27"},{"size":211,"mtime":1621471536353,"results":"49","hashOfConfig":"27"},{"size":250,"mtime":1621471732757,"results":"50","hashOfConfig":"27"},{"size":1080,"mtime":1624923056405,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zcb1te",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\index.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\App.js",["111","112","113","114"],"import React, {Component} from \"react\";\nimport {BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from\"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport setChallengeToken from \"./utils/setChallengeToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { setCurrentChallenge, dispatchRoomToken } from \"./actions/challengeActions\";\nimport { Link } from \"react-router-dom\";\n\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport socket from \"./socket\";\n\nimport './App.css';\n\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport BugReport from \"./components/dashboard/BugReport\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport ChallengeSelect from \"./components/dashboard/ChallengeSelect\";\nimport ChallengePage from \"./components/dashboard/ChallengePage\";\n\n\nif(localStorage.userToken) {\n  const token = localStorage.userToken;\n  setAuthToken(token);\n\n  const decoded = jwt_decode(token);\n  store.dispatch(setCurrentUser(decoded));\n\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nif(localStorage.challengeToken) {\n  const token = localStorage.challengeToken;\n  setChallengeToken(token);\n\n const decoded = jwt_decode(token);\n  store.dispatch(setCurrentChallenge(decoded));\n}\n\nif(localStorage.roomToken) {\n  const token = localStorage.roomToken;\n\n  const decoded = jwt_decode(token);\n  store.dispatch(dispatchRoomToken(decoded));\n}\n\nfunction App() {\n  return (\n    <Provider store = {store}>\n      <Router>\n          <div className=\"App\">\n          <Route exact path = \"/\" component={Landing} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path = \"/bugReport\" component ={BugReport} />\n          <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n              <PrivateRoute exact path =\"/challengeSelect\" component={ChallengeSelect}/>\n              <PrivateRoute exact path =\"/challengePage\" component={ChallengePage}/>\n          </Switch>\n          </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\store.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\utils\\setChallengeToken.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\socket.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\challengeActions.js",["115"],"import axios from \"axios\";\r\nimport setChallengeToken from \"../utils/setChallengeToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport {\r\n  SET_CHALLENGE,\r\n  SET_ROOM\r\n} from \"./types\";\r\n\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nexport const challengeUser = (ID) => dispatch => {\r\n  console.log('setChall call');\r\n  console.log(ID);\r\n  axios\r\n    .post(\"/api/users/getChallenge\", ID)\r\n    .then(res => {\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"challengeToken\", token);\r\n      // Set token to Auth header\r\n      setChallengeToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentChallenge(decoded));\r\n    })\r\n    .catch(err =>\r\n      console.log(err));\r\n\r\n};\r\n\r\nexport const setCurrentChallenge = challenge => {\r\n  return {\r\n    type: SET_CHALLENGE,\r\n    payload: challenge\r\n  };\r\n}\r\n\r\n  export const removeChallenge = () => dispatch => {\r\n    localStorage.removeItem(\"challengeToken\");\r\n    setChallengeToken(false);\r\n    dispatch(setCurrentChallenge({}));\r\n  };\r\n\r\n export const setCurrentRoom = (room) => dispatch => {\r\n\r\n    axios\r\n      .post(\"api/users/getRoom\", room)\r\n      .then(res => {\r\n        const { token } = res.data;\r\n        localStorage.setItem(\"roomToken\", token);\r\n        const decoded = jwt_decode(token);\r\n\r\n        dispatch(dispatchRoomToken(decoded));\r\n\r\n      })\r\n      .catch(err => \r\n        console.log(err.response.data));\r\n  }\r\n\r\n  export const dispatchRoomToken = room =>{\r\n    return {\r\n      type: SET_ROOM,\r\n      payload: room\r\n    }\r\n  }\r\n\r\n  export const removeRoom = () => dispatch => {\r\n    localStorage.removeItem(\"roomToken\");\r\n    dispatch(dispatchRoomToken({}));\r\n  }\r\n\r\n\r\n","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\authActions.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\layout\\Landing.js",["116"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Landing.css\";\r\nimport Button from \"react-bootstrap\";\r\n\r\nclass Landing extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"landingbg\"> \r\n       <div style={{ height: \"10vh\" }} className=\"row\">\r\n      <div className = \"col s12 center-align\">\r\n      <text\r\n          style={{\r\n            fontFamily: \"monospace\",\r\n            fontSize: \"30px\"\r\n          }}\r\n          className=\"brand-logo black-text\"\r\n        >\r\n          <i className=\"material-icons\">code</i>\r\n            CompCoder\r\n        </text>\r\n      </div>\r\n      </div>\r\n      \r\n        <div className=\"row justify-content-center\" style = {{marginTop: \"7vh\", marginBottom: \"7vh\"}}>\r\n            <h2>\r\n              <b>Challenge</b> yourself, become a better programmer{\" \"}\r\n            \r\n            </h2>\r\n          </div>  \r\n\r\n          <div className=\"row justify-content-center\" style = {{marginTop: \"7vh\", marginBottom: \"7vh\", marginLeft: \"15vw\", marginRight: \"15vw\"}}>\r\n            <p className=\"flow-text grey-text text-darken-1\">\r\n              Face off in a head to head challenge against real programmers around the world! Pass those test cases, and cut that runtime if you want to come out on top!\r\n            </p>\r\n            <br />\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n              <Link to = \"/register\">\r\n              <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n                marginRight: \"100px\"\r\n              }}\r\n\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n            >\r\n              Register\r\n            </button>\r\n            </Link>\r\n            <Link to = \"/login\">\r\n            <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n                marginLeft: \"100px\"\r\n              }}\r\n\r\n\r\n              onClick={this.toLoginPage}\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n            >\r\n              Login\r\n            </button>\r\n            </Link>\r\n            </div>\r\n          \r\n          </div>\r\n    );\r\n  }\r\n}\r\nexport default Landing;","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\BugReport.js",["117"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./BugReport.css\";\r\nimport { InputGroup, Button, FormControl } from \"react-bootstrap\";\r\n\r\nclass BugReport extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            problem: '',\r\n            email: ''\r\n        }\r\n    }\r\n\r\n    submit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const templateId = 'basic';\r\n        this.sendFeedback(templateId, {\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    sendFeedback = (templateId, variables) => {\r\n        window.emailjs.send(\r\n            'yahoo', templateId, variables)\r\n            .then(res => {\r\n\r\n            })\r\n    }\r\n\r\n    changeName = (event) => {\r\n        event.preventDefault();\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    changeProblem = (event) => {\r\n        event.preventDefault();\r\n        this.setState({problem: event.target.value});\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"bugreportbg\">\r\n            \r\n                <div style= {{width: \"70vw\", margin: \"auto\"}}>\r\n                <div className = \"d-flex justify-content-center\" style = {{marginBottom: \"10vh\"}}>\r\n                    <span style = {{fontSize: \"40px\"}}>\r\n                        Oh no, a bug!\r\n                    </span>\r\n                </div>\r\n\r\n                <div className = \"d-flex justify-content-center\">\r\n                    <label htmlFor=\"basic-url\" style = {{fontSize: \"25px\", color: \"black\"}}>\r\n                        What's your username?\r\n                    </label>\r\n                </div>\r\n\r\n                <div className = \"d-flex justify-content-center\">\r\n                    <InputGroup className = \"mb-3\"\r\n                    onChange = {this.changeName}>\r\n                \r\n                    <FormControl\r\n                    placeholder=\"Username\"\r\n                    aria-label=\"Username\"\r\n                    />\r\n                    </InputGroup>\r\n                </div>\r\n\r\n                <div className = \"d-flex justify-content-center\">\r\n                    <label htmlFor=\"basic-url\" style = {{fontSize: \"25px\", color: \"black\"}}>\r\n                        What seems to be the issue?\r\n                    </label>\r\n                </div>    \r\n                <div className = \"d-flex justify-content-center\">\r\n                <InputGroup className = \"mb-3\" \r\n                onChange = {this.changeProblem}>\r\n                \r\n                <FormControl as=\"textarea\"\r\n                    placeholder=\"Explain here\"\r\n                    aria-label=\"explain\"\r\n                />\r\n                </InputGroup>\r\n                </div>\r\n                <div className = \"d-flex justify-content-center\">\r\n                <Button\r\n                onClick = {this.submit}>\r\n                    Submit\r\n                </Button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default BugReport;","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\private-route\\PrivateRoute.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\ChallengeSelect.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\ChallengePage.js",["118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeChallenge, removeRoom, challengeUser } from \"../../actions/challengeActions\";\r\nimport { updateUserRank, coolDown } from \"../../actions/authActions\";\r\n\r\nimport \"unirest\";\r\nimport \"./ChallengePage.css\";\r\nimport Timer from \"./Timer\";\r\nimport socket from \"../../socket\";\r\nimport {Col, Alert, Button} from \"react-bootstrap\";\r\n\r\nimport Editor from \"@monaco-editor/react\";\r\nimport PanelGroup from 'react-panelgroup';\r\n\r\n\r\n\r\nclass ChallengePage extends Component { \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            input: '',\r\n            output: '',\r\n            language_id: 62,\r\n            user_input: '',\r\n            startTime: new Date().getTime(),\r\n            count: 0,\r\n            room: '',\r\n            timeOfLastRun: 0,\r\n            leaving: false,\r\n            mounted: false,\r\n            firstInput: false,\r\n            showOppInfo: false,\r\n            showGameFinished: false,\r\n            showConfirmLeave: false,\r\n            yourFinishInfo: '',\r\n            theirFinishInfo: '',\r\n            winnerInfo: '',\r\n            oppNumCorrect: 0,\r\n            oppRunTime: 0,\r\n            oppMemory: 0, \r\n            description: '',\r\n            exampleOne: '',\r\n            exampleTwo: '',\r\n            isGameFinished: false\r\n        \r\n\r\n        };\r\n\r\n\r\n        socket.on('gameEnd', this.opponentLeave);\r\n\r\n        socket.on(\"intervalUpdate\", (data) => {\r\n\r\n            this.setState({oppNumCorrect: data.numCorrect, oppRunTime: data.runTime, oppMemory: data.memory})\r\n            this.showOppInfoAlert();\r\n        })\r\n\r\n       // socket.on('reconnect', () =>{\r\n       //    console.log('reconnection');\r\n       //    socket.emit('rejoinGame', { room: this.props.room.room });\r\n        //});\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (!nextProps.isChallenge) {\r\n            console.log('nextProps');\r\n            this.props.history.push(\"/dashboard\"); // push user back to dashboard once the room and challenge have been removed from state tree\r\n        }\r\n        /*if (nextProps.errors) {\r\n          this.setState({\r\n            errors: nextProps.errors\r\n          });\r\n        }*/\r\n    }\r\n\r\n\r\n    componentWillUnmount(){\r\n        console.log('unmounting');\r\n        console.log(this.props.isChallenge);\r\n        console.log(this.props.user);\r\n\r\n        localStorage.removeItem('srcCode');\r\n        localStorage.removeItem('numCorrect');\r\n        localStorage.removeItem('runTime');\r\n        localStorage.removeItem('memory');\r\n        localStorage.removeItem('description');\r\n        localStorage.removeItem('exampleOne');\r\n        localStorage.removeItem('exampleTwo');\r\n\r\n        socket.emit('endGame', {room: this.props.room.room});\r\n\r\n\r\n        this.props.removeRoom();\r\n        this.props.removeChallenge();\r\n    \r\n     }\r\n\r\n     componentWillMount() {\r\n         if(localStorage.getItem('description')){\r\n             this.setState({description: localStorage.getItem('description')\r\n             , exampleOne: localStorage.getItem('exampleOne'),\r\n             exampleTwo: localStorage.getItem('exampleTwo')})\r\n         }\r\n         else{\r\n            var description = this.props.challenge.challenge.description;\r\n\r\n            var exampleOne = description.substring(description.indexOf('!') + 1, description.indexOf('@'));\r\n            var exampleTwo = description.substring(description.indexOf('@') + 1, description.length);\r\n\r\n            exampleOne = exampleOne.split('%').map((line) => <text>{line}<br/></text>);\r\n            exampleTwo = exampleTwo.split('%').map((line) => <text>{line}<br/></text>);\r\n            \r\n\r\n            description = description.substring(0, description.indexOf('!'));\r\n\r\n\r\n            description = description.split('%').map((line) => <text >{line}<br/></text>);\r\n\r\n            this.setState({description: description, exampleOne: exampleOne, exampleTwo: exampleTwo});\r\n            localStorage.setItem('description', description);\r\n            localStorage.setItem('exampleOne', exampleOne);\r\n            localStorage.setItem('exampleTwo', exampleTwo);\r\n         }\r\n     }\r\n\r\n     componentDidMount(){\r\n         \r\n         //this.enableTab('source');\r\n     }\r\n      \r\n\r\n\r\n    back = (event) => {\r\n        event.preventDefault();\r\n        if(!this.state.isGameFinished){\r\n            this.showConfirmLeave();\r\n        }\r\n        else{\r\n            this.setState({leaving: true});\r\n            socket.emit('endGame', {room: this.props.room.room});\r\n            this.props.history.push('/dashboard');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    confirmedAbandon = (event) => {\r\n        event.preventDefault();\r\n        this.setState({leaving: true});\r\n        socket.emit('endGame', {room: this.props.room.room});\r\n        this.props.coolDown({name: this.props.user.name, time: new Date().getTime() +1800000});\r\n\r\n        this.props.history.push('/dashboard');\r\n    }\r\n\r\n    opponentLeave = () => {\r\n\r\n        this.setState({leaving: true});\r\n        //socket.emit('opponentLeft', {room:this.props.room.room});\r\n\r\n        this.props.history.push('/dashboard');\r\n\r\n    }\r\n\r\n    backMyFault = () => {\r\n        this.setState({leaving: true});\r\n\r\n        socket.emit('endGame', {room: this.props.room.room});\r\n        this.props.history.push('/dashboard');\r\n\r\n        \r\n    }\r\n\r\n    input = (value, event) => {\r\n       // event.preventDefault();\r\n\r\n        if(!this.state.firstInput){\r\n            if(parseInt(this.props.room.room.split('/')[1])!== this.props.challenge.challenge.i){\r\n                //this.back();\r\n\r\n                this.backMyFault();  \r\n            }\r\n        }\r\n        socket.emit('checkRoom');\r\n       // console.log(this.props.room);\r\n       // console.log(this.props.challenge);\r\n\r\n       // console.log(socket);\r\n\r\n       // if(this.state.count===0)\r\n      //      this.enableTab('source');\r\n\r\n        localStorage.setItem('srcCode', value);    //store input in local storage so it is preserved on refresh    \r\n        this.setState({ input: value, count: 1, firstInput: true});\r\n\r\n\r\n    };\r\n\r\n    userInput = (event) => {\r\n        event.preventDefault();\r\n        this.setState({ user_input: event.target.value });\r\n      };\r\n\r\n    submit = async (e) =>{\r\n        e.preventDefault();\r\n\r\n        var currentTime = new Date().getTime();\r\n\r\n\r\n        if((currentTime - this.state.timeOfLastRun)/1000 >= 30){\r\n\r\n        this.setState({timeOfLastRun: new Date().getTime()});  \r\n        outputText = document.getElementById('output').textContent;\r\n        \r\n        let outputText = document.getElementById(\"output\");\r\n        const { challenge } = this.props.challenge;\r\n\r\n        var j = 0;\r\n        var str2 = ''; \r\n        var str3 = this.state.input;\r\n        const timeElapsed = new Date().getTime() - this.state.startTime;\r\n        //Building the main method that will be used to invoke the user made method, and adding an import of Scanner at the beginning\r\n        \r\n\r\n        var str1 = '\\tpublic static void main(String[] args){\\n';\r\n\r\n        var w = 0;\r\n        var str5 = '';\r\n        var userOutputs = '';\r\n        var userOutputsCorrect = {};\r\n        var correct = true;\r\n        var userOutputsSplit ={};\r\n        var numCorrect = 0;\r\n        var runTime = 0;\r\n        var memory = 0;\r\n        var numOfLoops = 0;\r\n\r\n\r\n        for(var j = 0; j <challenge.inputs.length; j++){\r\n            str1 = str1 + \"\\t\\ttry{\\n\\t\\t\\tSystem.out.println(\" + challenge.methodName + \"(\";\r\n            for(var k = 0; k<challenge.inputs[j].length; k++){\r\n                str1 = str1 + challenge.inputs[j][k];\r\n                if(k<challenge.inputs[j].length-1)\r\n                    str1= str1 + ', ';\r\n            }\r\n            str1 = str1 + \"));}\\n\\t\\tcatch(Exception e){\\n\\t\\t\\tSystem.out.println(e.toString());\\n\\t\\t}\\n\";\r\n        }\r\n        str1 = str1 + \"\\t}\\n\";\r\n\r\n\r\n\r\n        while(str3.length>0){\r\n            w = str3.indexOf('\\n');\r\n            if(str3.indexOf(\"public class Main\")!==0){      //Toss a main method in there that calls the input method and passes into it the subject input\r\n                str2 = str2 + str3.substring(0, w+1);\r\n                str3 = str3.substring(w+1, str3.length);\r\n            }\r\n            else{\r\n                str2 = str2 + \"\\n\" + challenge.dataStructure + \"\\n\" + str3.substring(0, w+1);\r\n                str3 = str3.substring(w+1, str3.length);\r\n                str2 = str2.concat(str1, str3);\r\n                break;\r\n            }\r\n        }  \r\n\r\n        \r\n\r\n        const response = await fetch(\r\n            \"https://judge0-extra.p.rapidapi.com/submissions\",\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n                    \"x-rapidapi-key\": \"e51bc475ffmshb688bd7febd7bdap175735jsn486eb27febcb\", \r\n                    \"content-type\": \"application/json\",\r\n                    accept: \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    source_code: str2,\r\n                    language_id: 62\r\n                }),\r\n                }\r\n            \r\n            );\r\n            \r\n            const jsonResponse = await response.json();\r\n            \r\n\r\n            let jsonGetSolution ={\r\n                status: { description: \"Queue\" },\r\n                stderr: null,\r\n                compile_output: null\r\n            };\r\n\r\n\r\n            while(\r\n                (jsonGetSolution.status.description!== \"Accepted\"&&\r\n                jsonGetSolution.stderr == null &&\r\n                jsonGetSolution.compile_output == null)\r\n            ) {\r\n\r\n                numOfLoops++;\r\n                if(numOfLoops>100){\r\n                    break;\r\n                }\r\n                if(jsonResponse.token){\r\n\r\n                    let url = `https://judge0-extra.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;\r\n                    \r\n                    const getSolution = await fetch(url, {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n                            \"x-rapidapi-key\": \"e51bc475ffmshb688bd7febd7bdap175735jsn486eb27febcb\", \r\n                            \"content-type\": \"application/json\",\r\n                          },\r\n                    });\r\n\r\n                    jsonGetSolution = await getSolution.json();\r\n                }\r\n            }\r\n\r\n            if(jsonGetSolution.stdout){\r\n                userOutputs = atob(jsonGetSolution.stdout);\r\n                runTime = jsonGetSolution.time;\r\n                memory = jsonGetSolution.memory;\r\n\r\n                userOutputsSplit = userOutputs.split(\"\\n\");\r\n                \r\n                for(var t = 0; t<userOutputsSplit.length; t++){\r\n                    if(userOutputsSplit[t] === challenge.outputs[t]){\r\n                        userOutputsCorrect[t] = true;\r\n                        numCorrect++;\r\n                    \r\n                    }    \r\n                    else{\r\n                    \r\n                        correct = false;\r\n                        userOutputsCorrect[t] = false;\r\n                    }\r\n                }\r\n                str2 = \"You passed \" + numCorrect + \"/\" + challenge.inputs.length + \" cases, and it took you \" + (timeElapsed/1000) + \" seconds. The average run time was \" + (runTime/challenge.inputs.length) + \" ms and you used \" + memory + \" KB of memory!\\n\" + \"Did all test cases pass?: \" + correct +\"\\n\\n\";\r\n    \r\n                localStorage.setItem(\"numCorrect\", numCorrect);\r\n                localStorage.setItem(\"runTime\", runTime);\r\n                localStorage.setItem(\"memory\", memory);\r\n\r\n                //for(var j = 0; j<challenge.outputs.length; j++){\r\n                //    str2 = str2 + \"Input(s): \" + challenge.inputs[j] + \"\\nYour Output: \" + userOutputsSplit[j] + \"\\nExpected Output: \" + challenge.outputs[j] + \"\\nOutput correct?: \" + userOutputsCorrect[j] + \"\\n-------------------------------------------\\n\";\r\n                //}\r\n            }    \r\n            else if(jsonGetSolution.stderr){\r\n                userOutputs = atob(jsonGetSolution.stderr);\r\n                str2 = userOutputs;\r\n                correct = false;\r\n            }\r\n    \r\n            else{\r\n                userOutputs = atob(jsonGetSolution.compile_output);\r\n                str2 = userOutputs;\r\n                correct = false;\r\n            }\r\n            outputText.textContent = str2;\r\n        }\r\n        else{\r\n            document.getElementById('warningText').textContent = \"Please wait another \" + (30 - (currentTime - this.state.timeOfLastRun)/1000) + \" seconds to run again\"; \r\n        }\r\n    \r\n    \r\n    };\r\n\r\n    enableTab(id) {\r\n        var el = document.getElementById(id);\r\n        el.onkeydown = function(e) {\r\n            if (e.keyCode === 9) { // tab was pressed\r\n    \r\n                // get caret position/selection\r\n                var val = this.value,\r\n                    start = this.selectionStart,\r\n                    end = this.selectionEnd;\r\n    \r\n                // set textarea value to: text before caret + tab + text after caret\r\n                this.value = val.substring(0, start) + '\\t' + val.substring(end);\r\n    \r\n                // put caret at right position again\r\n                this.selectionStart = this.selectionEnd = start + 1;\r\n    \r\n                // prevent the focus lose\r\n                return false;\r\n    \r\n            }\r\n        };\r\n    }\r\n\r\n    rejoinRoom(){\r\n        socket.emit('rejoinRoom', {room:this.props.room});\r\n    }\r\n\r\n    timesUp = async () => {\r\n        this.setState({isGameFinished: true});\r\n        let outputText = document.getElementById(\"output\");\r\n        const { challenge } = this.props.challenge;\r\n        var OCI = '';\r\n        var hasOwn = false;\r\n        var hasOpp = false;\r\n        var oppNumCorrect;\r\n        var oppRunTime;\r\n        var oppMemory;\r\n        var oppCorrect;\r\n        var didWin = 2;\r\n        var numOfLoops = 0;\r\n\r\n\r\n        socket.on('opponentsChallengeInfo', (data) => {\r\n            OCI = \"Your opponent passed \" + data.oppNumCorrect + \"/\" + challenge.inputs.length + \" cases. Their run time was \" + data.oppRunTime + \" ms and they used \" + data.oppMemory + \" KB of memory!\\n\" + \"Did all their test cases pass?: \" + data.oppCorrect +\"\\n\\n\";\r\n            this.setState({theirFinishInfo: OCI});\r\n            hasOpp = true;\r\n\r\n            console.log('OCI');\r\n            if(hasOwn === true){\r\n                console.log('hasown');\r\n                str2 = str2 + OCI;\r\n                var winnerString = '';\r\n\r\n                if(oppNumCorrect<numCorrect){\r\n                    winnerString = \"You passed more test cases, so you won :)\";\r\n                    str2 = str2 + \"\\nYou passed more test cases, so you won :)\";\r\n                    didWin = 1;\r\n\r\n                }\r\n                else if(oppNumCorrect>numCorrect){\r\n                    winnerString = \"They passed more test cases, so you lost :(\";\r\n                    str2 = str2 + \"\\nThey passed more test cases, so you lost :(\";\r\n                    didWin = 0;\r\n                }\r\n\r\n                else{\r\n                    winnerString = \"You both had the same number of case right\";\r\n                    str2 = str2 + \"\\nYou both had the same number of case right\";\r\n                    if(runTime < oppRunTime){\r\n                        winnerString = winnerString + \", but you had a better run time, so you win :^)\";\r\n                        str2 = str2 + \", but you had a better run time, so you win :^)\";\r\n                        didWin = 1;\r\n                    }\r\n                    else if(oppRunTime < runTime){\r\n                        winnerString = winnerString + \", but they had a better run time, so you lost :^(\";\r\n                        str2 = str2 + \", but they had a better run time, so you lost :^(\";\r\n                        didWin = 0;\r\n                    }\r\n                    else{\r\n                        winnerString = winnerString + \", and you both somehow had the same runtime. Lets call it a draw\";\r\n                        str2 = str2 + \", and you both somehow had the same runtime. Lets call it a draw \";\r\n                        didWin = 2;\r\n                    \r\n                    }\r\n                }\r\n                outputText.textContent = str2;\r\n                this.setState({winnerInfo: winnerString});\r\n                this.showGameFinishedAlert();\r\n                if(this.props.user.isCompetitive){\r\n                    if(didWin === 0){\r\n                        if(this.props.user.rank - 20 >= 100){\r\n                            this.props.updateUserRank({name: this.props.user.name, rank: this.props.user.rank, eloUpdate: -20})\r\n                        }\r\n                    }\r\n                    else if(didWin === 1){\r\n                        if(this.props.user.rank + 20 <= 799){\r\n                            this.props.updateUserRank({name: this.props.user.name, rank: this.props.user.rank, eloUpdate: 20})\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            else{\r\n                console.log('no hasown yet');\r\n                oppNumCorrect = data.oppNumCorrect;\r\n                oppRunTime = data.oppRunTime;\r\n                oppMemory = data.oppMemory;\r\n                oppCorrect = data.oppCorrect;\r\n            }\r\n        });\r\n    \r\n        var j = 0;\r\n        var str2 = ''; \r\n        var str3 = this.state.input;\r\n        const timeElapsed = new Date().getTime() - this.state.startTime;\r\n    \r\n        //Building the main method that will be used to invoke the user made method, and adding an import of Scanner at the beginning\r\n            \r\n    \r\n        var str1 = '\\tpublic static void main(String[] args){\\n';\r\n    \r\n        var w = 0;\r\n            var str5 = '';\r\n            var userOutputs = '';\r\n            var userOutputsCorrect = {};\r\n            var correct = true;\r\n            var userOutputsSplit ={};\r\n            var numCorrect = 0;\r\n            var runTime = 0;\r\n            var memory = 0;\r\n    \r\n    \r\n            for(var j = 0; j <challenge.inputs.length; j++){\r\n                str1 = str1 + \"\\t\\ttry{\\n\\t\\t\\tSystem.out.println(\" + challenge.methodName + \"(\";\r\n                for(var k = 0; k<challenge.inputs[j].length; k++){\r\n                    str1 = str1 + challenge.inputs[j][k];\r\n                    if(k<challenge.inputs[j].length-1)\r\n                        str1= str1 + ', ';\r\n                }\r\n                str1 = str1 + \"));}\\n\\t\\tcatch(Exception e){\\n\\t\\t\\tSystem.out.println(e.toString());\\n\\t\\t}\\n\";\r\n            }\r\n            str1 = str1 + \"\\t}\\n\";\r\n    \r\n    \r\n    \r\n            while(str3.length>0){\r\n                w = str3.indexOf('\\n');\r\n                if(str3.indexOf(\"public class Main\")!==0){      //Toss a main method in there that calls the input method and passes into it the subject input\r\n                    str2 = str2 + str3.substring(0, w+1);\r\n                    str3 = str3.substring(w+1, str3.length);\r\n                }\r\n                else{\r\n                    str2 = str2 + \"\\n\" + challenge.dataStructure + \"\\n\" + str3.substring(0, w+1);\r\n                    str3 = str3.substring(w+1, str3.length);\r\n                    str2 = str2.concat(str1, str3);\r\n                    break;\r\n                }\r\n            } \r\n            \r\n            \r\n            \r\n    \r\n            const response = await fetch(\r\n                \"https://judge0-extra.p.rapidapi.com/submissions\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n                        \"x-rapidapi-key\": \"e51bc475ffmshb688bd7febd7bdap175735jsn486eb27febcb\", \r\n                        \"content-type\": \"application/json\",\r\n                        accept: \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        source_code: str2,\r\n                        language_id: 62\r\n                    }),\r\n                    }\r\n                \r\n                );\r\n\r\n                console.log('running code');\r\n                \r\n                const jsonResponse = await response.json();\r\n                \r\n    \r\n                let jsonGetSolution ={\r\n                    status: { description: \"Queue\" },\r\n                    stderr: null,\r\n                    compile_output: null\r\n                };\r\n                console.log('running code 2');\r\n    \r\n    \r\n                while(\r\n                    (jsonGetSolution.status.description!== \"Accepted\"&&\r\n                    jsonGetSolution.stderr == null &&\r\n                    jsonGetSolution.compile_output == null)\r\n                ) {\r\n                    numOfLoops++;\r\n                    if(numOfLoops>100){\r\n                        break;\r\n                    }\r\n                    if(jsonResponse.token){\r\n\r\n                        console.log('token');\r\n    \r\n                        let url = `https://judge0-extra.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;\r\n                        \r\n                        const getSolution = await fetch(url, {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n                                \"x-rapidapi-key\": \"e51bc475ffmshb688bd7febd7bdap175735jsn486eb27febcb\", \r\n                                \"content-type\": \"application/json\",\r\n                              },\r\n                        });\r\n                        console.log('await get solution');\r\n    \r\n                        jsonGetSolution = await getSolution.json();\r\n                    }\r\n                }\r\n    \r\n                if(jsonGetSolution.stdout){\r\n                    console.log('solution got');\r\n\r\n                    userOutputs = atob(jsonGetSolution.stdout);\r\n                    runTime = jsonGetSolution.time;\r\n                    memory = jsonGetSolution.memory;\r\n\r\n    \r\n                    userOutputsSplit = userOutputs.split(\"\\n\");\r\n                    \r\n                    for(var t = 0; t<userOutputsSplit.length; t++){\r\n                        if(userOutputsSplit[t] === challenge.outputs[t]){\r\n                            \r\n                            userOutputsCorrect[t] = true;\r\n                            numCorrect++;\r\n                        \r\n                        }    \r\n                        else{\r\n                        \r\n                            correct = false;\r\n                            userOutputsCorrect[t] = false;\r\n                        }\r\n                    }\r\n\r\n                    \r\n                    str2 = \"You passed \" + numCorrect + \"/\" + challenge.inputs.length + \" cases. The run time was \" + runTime + \" ms and you used \" + memory + \" KB of memory!\\n\" + \"Did all test cases pass?: \" + correct +\"\\n\\n\";\r\n                    this.setState({yourFinishInfo: str2});\r\n        \r\n                   // for(var j = 0; j<challenge.outputs.length; j++){\r\n                      //  str2 = str2 + \"Input(s): \" + challenge.inputs[j] + \"\\nYour Output: \" + userOutputsSplit[j] + \"\\nExpected Output: \" + challenge.outputs[j] + \"\\nOutput correct?: \" + userOutputsCorrect[j] + \"\\n-------------------------------------------\\n\";\r\n                    //}\r\n                }    \r\n                else if(jsonGetSolution.stderr){\r\n                    userOutputs = atob(jsonGetSolution.stderr);\r\n                    str2 = userOutputs;\r\n                    correct = false;\r\n                }\r\n        \r\n                else{\r\n                    userOutputs = atob(jsonGetSolution.compile_output);\r\n                    str2 = userOutputs;\r\n                    correct = false;\r\n                }\r\n            \r\n\r\n                hasOwn = true;\r\n                console.log('finished running code');\r\n\r\n                socket.emit('myChallengeInfo', {room: this.props.room.room, numCorrect: numCorrect, runTime: runTime, memory:memory, correct:correct});\r\n                if(hasOpp){\r\n                    var winnerString = '';\r\n                    console.log('hasopp');\r\n                    str2 = str2 + OCI;\r\n                    if(oppNumCorrect<numCorrect){\r\n                        winnerString = \"You passed more test cases, so you won :)\";\r\n                        str2 = str2 + \"\\nYou passed more test cases, so you won :)\";\r\n                        didWin = 1;\r\n\r\n                    }\r\n                    else if(oppNumCorrect>numCorrect){\r\n                        winnerString = \"They passed more test cases, so you lost :(\";\r\n                        str2 = str2 + \"\\nThey passed more test cases, so you lost :(\";\r\n                        didWin = 0;\r\n                    }\r\n    \r\n                    else{\r\n                        winnerString = \"You both had the same number of case right\";\r\n                        str2 = str2 + \"\\nYou both had the same number of case right\";\r\n                        if(runTime < oppRunTime){\r\n                            winnerString = winnerString + \", but you had a better run time, so you win :^)\";\r\n                            str2 = str2 + \", but you had a better run time, so you win :^)\";\r\n                            didWin = 1;\r\n                        }\r\n                        else if(oppRunTime < runTime){\r\n                            winnerString = winnerString + \", but they had a better run time, so you lost :^(\";\r\n                            str2 = str2 + \", but they had a better run time, so you lost :^(\";\r\n                            didWin = 0;\r\n                        }\r\n                        else{\r\n                            winnerString = winnerString + \", and you both somehow had the same runtime. Lets call it a draw\";\r\n                            str2 = str2 + \", and you both somehow had the same runtime. Lets call it a draw \";\r\n                            didWin = 2;\r\n                        \r\n                        }\r\n                    }\r\n\r\n                    outputText.textContent = str2;\r\n\r\n                    this.setState({winnerInfo: winnerString});\r\n                    this.showGameFinishedAlert();\r\n\r\n                    if(this.props.user.isCompetitive){\r\n                        if(didWin === 0){\r\n                            if(this.props.user.rank - 20 >= 100){\r\n                                this.props.updateUserRank({name: this.props.user.name, rank: this.props.user.rank, eloUpdate: -20})\r\n                            }\r\n                        }\r\n                        else if(didWin === 1){\r\n                            if(this.props.user.rank + 20 <= 799){\r\n                                this.props.updateUserRank({name: this.props.user.name, rank: this.props.user.rank, eloUpdate: 20})\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n        \r\n                \r\n        };\r\n\r\n   componentDidMount(){\r\n\r\n    \r\n\r\n        if(!this.state.leaving){\r\n            socket.emit('rejoinGame', { room: this.props.room.room });\r\n        \r\n        }\r\n    }\r\n\r\n\r\n    intervalUpdate = () => {\r\n        if(localStorage.getItem(\"numCorrect\")){\r\n            socket.emit(\"intervalUpdate\", { \r\n                numCorrect: localStorage.getItem(\"numCorrect\"),\r\n                runTime: localStorage.getItem(\"runTime\"),\r\n                memory: localStorage.getItem(\"memory\"),\r\n                room: this.props.room.room\r\n            });\r\n        }\r\n    }\r\n\r\n    showOppInfoAlert = () =>{\r\n        this.setState({showOppInfo: true});\r\n    } \r\n\r\n    showGameFinishedAlert = () =>{\r\n        this.setState({showGameFinished: true});\r\n    }\r\n    showConfirmLeave = () => {\r\n        this.setState({showConfirmLeave:true});\r\n    }\r\n\r\n    closeConfirmLeave = () => {\r\n        this.setState({showConfirmLeave:false});\r\n    }\r\n\r\n\r\n    mapMakeDescription = () => {\r\n        this.props.challenge.challenge.description.split('%').map(line => {\r\n            return <text>{line}<br/></text>\r\n        })\r\n    }\r\n    /*makeDescription = () => {\r\n        var lineBreak = document.createElement(\"br\");\r\n\r\n        lineBreak.type = \"br\";\r\n        const descriptionSplit = this.props.challenge.challenge.description.split('%');\r\n\r\n\r\n        var descText = document.createElement('text');\r\n        descText.type = \"text\";\r\n        descText.innerHTML = '';\r\n\r\n        console.log(lineBreak);\r\n\r\n        for(var i = 0; i<descriptionSplit.length; i++){\r\n            if(descriptionSplit[i].charAt(0)==='!'){\r\n                descText.innerHTML = descText.innerHTML + 'Example 1:' + lineBreak;\r\n            }\r\n            else if(descriptionSplit[i].charAt(0)==='@'){\r\n                descText.innerHTML = descText.innerHTML + 'Example 2:' + lineBreak;\r\n            }\r\n            descText.innerHTML = descText.innerHTML + descriptionSplit[i] + lineBreak;\r\n            //console.log('hi');\r\n           // console.log(descText.innerHTML);\r\n\r\n        }\r\n        document.getElementById('description').innerHTML = descText.innerHTML;\r\n\r\n        \r\n    }*/\r\n\r\n    render(){\r\n\r\n\r\n        const { challenge } = this.props.challenge;\r\n        const { room } = this.props.room;\r\n        console.log('render')\r\n        var splitImports;\r\n\r\n        if(this.state.firstInput===false){\r\n            var DS = \" \\n\";\r\n\r\n            if(challenge.dataStructure!==\"  \"){\r\n                DS = \"/*\\n\" + challenge.dataStructure + \"\\n*//*\\n\";\r\n            }\r\n\r\n            if(challenge.imports!==\" \"){\r\n                splitImports = challenge.imports.split('|');\r\n                for(var j = 0; j<splitImports.length; j++){\r\n                    DS = DS + splitImports[j] + \"\\n\";\r\n                }\r\n            }\r\n\r\n\r\n            DS = DS + \"public class Main{\\n\\tpublic static \"+ challenge.outputType + \" \" + challenge.methodName + \"(\";\r\n                for(var l = 0; l<challenge.inputTypes.length; l++){\r\n                DS = DS + challenge.inputTypes[l] + \" \" + challenge.inputVarNames[l];\r\n                if(l<challenge.inputTypes.length-1){\r\n                    DS = DS + \", \";\r\n                }        \r\n\r\n\r\n                \r\n        }\r\n        DS = DS + \"){\\n\\n\\t}\\n}\";\r\n\r\n\r\n        var selected;\r\n\r\n        \r\n\r\n        if(localStorage.getItem('srcCode')){\r\n\r\n\r\n            if(localStorage.getItem('srcCode')!==DS){\r\n               // localStorage.setItem('description', description);\r\n                selected = DS;\r\n                localStorage.setItem('srcCode', DS);\r\n                //document.getElementById('source').innerHTML = DS;\r\n                //document.getElementById('description').innerHTML = description;\r\n                this.setState({input: DS});\r\n\r\n                if(this.state.firstInput===false)\r\n                    window.location.reload(false);\r\n                \r\n\r\n            }\r\n            else{\r\n               // description = localStorage.getItem('description');\r\n                selected = localStorage.getItem('srcCode');\r\n            }\r\n\r\n        }\r\n\r\n        else{\r\n            selected = DS;\r\n            localStorage.setItem('srcCode', DS);\r\n           // localStorage.setItem('description', description);\r\n        }\r\n        }\r\n\r\n\r\n        return(\r\n            <div className = \"challengepagebg\">\r\n            \r\n            <PanelGroup direction = \"row\">\r\n                <div id = \"transparent\">\r\n                    <div style = {{marginTop: \"10px\"}}>\r\n                        <h4>\r\n                            <p id = 'title'>{challenge.name}</p>\r\n                        </h4>\r\n                    </div>\r\n\r\n                    <br></br>\r\n\r\n                    <div style = {{marginLeft: \"5px\", marginRight: \"5px\"}}>\r\n                        <div class = \"d-flex justify-content-left\">\r\n                \r\n                            <text id= 'description'>{this.state.description}</text>\r\n                        </div>   \r\n                        <hr></hr>\r\n                        <br></br>\r\n\r\n                        <div class = \"d-flex justify-content-left\">\r\n                            <text id= \"exampleTitle\">{this.state.exampleOne=== '' ? '' : 'Example 1:' }<br></br><br></br></text>\r\n                        </div>    \r\n\r\n                        <div class = \"d-flex justify-content-left\">\r\n                            <text id = \"example\">{this.state.exampleOne}</text>\r\n                        </div>\r\n\r\n                        <div class = \"d-flex justify-content-left\">    \r\n                            <text id= \"exampleTitle\">{this.state.exampleTwo=== '' ? '' : 'Example 2:' }<br></br><br></br></text>\r\n                        </div>  \r\n\r\n                        <div class = \"d-flex justify-content-left\">\r\n                            <text id = \"example\">{this.state.exampleTwo}</text>\r\n                        </div>   \r\n                    </div> \r\n                    \r\n\r\n                </div>\r\n\r\n                <div style = {{width: \"100vw\"}}>\r\n                <Alert show = {this.state.showOppInfo}\r\n                    variant = \"info\"\r\n                    dismissable>\r\n                    <Alert.Heading>\r\n                        Little update on your opponents progress...\r\n                    </Alert.Heading>\r\n                    <p>\r\n                        They currently have passed {this.state.oppNumCorrect} cases, have a run time of {this.state.oppRunTime} ms and are using {this.state.oppMemory} KBs of memory.\r\n                    </p>\r\n                </Alert>\r\n\r\n                <Alert show = {this.state.showGameFinished}\r\n                    variant = \"info\"\r\n                    dismissable>\r\n\r\n                    <Alert.Heading>\r\n                        {this.state.winnerInfo}\r\n                    </Alert.Heading>\r\n\r\n                    <p>Your game data looked like:<br></br>{this.state.yourFinishInfo}<br></br><hr></hr>Their data looked like: <br></br>{this.state.theirFinishInfo}</p>\r\n                </Alert>\r\n\r\n                <Alert show = {this.state.showConfirmLeave}\r\n                    variant = \"info\"\r\n                    dismissable>\r\n\r\n                    <Alert.Heading>\r\n                        Are you sure you would like to leave?\r\n                    </Alert.Heading>\r\n\r\n                    <p>Be warned, abandoning incurs a cooldown!</p>\r\n                    <hr></hr>\r\n\r\n                    <Button \r\n                        onClick={this.confirmedAbandon}\r\n                    >Leave</Button>   \r\n                    <Button \r\n                        onClick={this.closeConfirmLeave}\r\n                    >Nevermind</Button>   \r\n                </Alert>\r\n\r\n\r\n                    \r\n                    <div class =\"row justify-content-center\" style ={{ height: \"8vh\" }}>\r\n                    <text\r\n                        style={{\r\n                            fontFamily: \"monospace\",\r\n                            fontSize: \"30px\"\r\n                        }}\r\n                        className=\"brand-logo black-text\"\r\n                        >\r\n                        <i className=\"material-icons\">code</i>\r\n                            CompCoder\r\n                    </text>\r\n                    </div>\r\n\r\n                    <div class =\"d-flex justify-content-between\" style ={{ height: \"8vh\" }}>\r\n                        \r\n                        <button \r\n                            type=\"submit\"\r\n                            className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                            onClick ={this.back}\r\n                            style = {{marginLeft: \"20px\"}}>\r\n                        \r\n                            <i class=\"fas fa-cog fa-fw\"></i> Back\r\n                        </button>\r\n                        <div style ={{marginRight: \"3vw\"}}>\r\n                            <Timer timesUp = {this.timesUp} intervalUpdate = {this.intervalUpdate}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div class =\"row justify-content-center\" style ={{ height: \"65vh\" }}>\r\n                    <Col xs = {8}>\r\n                        <Editor\r\n                        required\r\n                        height=\"65vh\"\r\n                        defaultLanguage= \"java\"\r\n                        defaultValue = {DS}\r\n                        name=\"solution\"\r\n                        id=\"source\"\r\n                        onChange={this.input}\r\n                        editorProps={{blockingScroll:true}}>\r\n                            {DS}\r\n                        </Editor>\r\n                    </Col> \r\n\r\n                    <Col xs = {3}>\r\n                        <textarea \r\n                        id = \"output\">\r\n                            {this.state.output}\r\n                        </textarea>\r\n                    </Col>\r\n                    </div>\r\n\r\n                    <div class =\"row justify-content-center\" style ={{ height: \"9vh\" }}>   \r\n\r\n                    <button\r\n                        style={{\r\n                            width: \"150px\",\r\n                            borderRadius: \"3px\",\r\n                            letterSpacing: \"1.5px\",\r\n                            marginTop: \"1rem\"\r\n                        }}\r\n                        type=\"submit\"\r\n                        className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                        onClick={this.submit}\r\n                    >\r\n                    <i class=\"fas fa-cog fa-fw\"></i> Run\r\n                    </button>\r\n                    <text id=\"warningText\"></text>\r\n                    </div>\r\n\r\n                        \r\n            \r\n            </div> \r\n        </PanelGroup>\r\n        </div>\r\n        \r\n   \r\n                    \r\n                \r\n        \r\n        );\r\n    }\r\n}\r\n   \r\n\r\nChallengePage.propTypes = {\r\n    updateUserRank: PropTypes.func.isRequired,\r\n    coolDown: PropTypes.func.isRequired,\r\n\r\n    removeChallenge: PropTypes.func.isRequired,\r\n    challengeUser: PropTypes.func.isRequired,\r\n    challenge: PropTypes.object.isRequired,\r\n    isChallenge: PropTypes.bool.isRequired,\r\n\r\n    room: PropTypes.string.isRequired,\r\n    isRoom: PropTypes.bool.isRequired,\r\n    removeRoom: PropTypes.func.isRequired,\r\n\r\n    user: PropTypes.object.isRequired\r\n\r\n\r\n  };\r\n  \r\n  const mapStateToProps = state => ({\r\n    challenge: state.auth.challenge,\r\n    isChallenge: state.auth.isChallenge,\r\n    room: state.auth.room,\r\n    isRoom: state.auth.isRoom,\r\n\r\n    user: state.auth.user\r\n  });\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { removeChallenge, removeRoom, challengeUser, updateUserRank, coolDown}\r\n)(ChallengePage);    ","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\auth\\Register.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\Dashboard.js",["132","133","134","135","136"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser, endCoolDown, setIsCompetitive  } from \"../../actions/authActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport socket from \"../../socket\";\r\nimport { challengeUser, setCurrentRoom, removeChallenge, removeRoom } from \"../../actions/challengeActions\";\r\nimport \"./Dashboard.css\";\r\nimport CheckInTimer from \"./CheckInTimer\";\r\nimport CompTimer from \"./CompTimer\";\r\nimport {Button, Modal, Col, Alert, Card} from \"react-bootstrap\";\r\nimport BarLoader from \"react-spinners/ClipLoader\";\r\n\r\n\r\n\r\nclass Dashboard extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    console.log('redirected');\r\n\r\n    this.state ={\r\n        lobbies: [],\r\n        namesToLobbies: [],\r\n        isGameReady: false,\r\n        isLobbyCreated: false,\r\n        lobby: '',\r\n        showCreate: false,\r\n        showCheckIn: false,\r\n        showJoinGame: false,\r\n        showCreaterDidntConfirm: false,\r\n        showGameFull: false,\r\n        showCoolDownWait: false,\r\n        showConfirmComp: false,\r\n        showIsQueued: false,\r\n        userRank: '',\r\n        queueTime: 0.0,\r\n        queueInterval: {},\r\n        isQueued: false,\r\n        isOpponentCheckedIn: false,\r\n        isCheckedIn: false\r\n\r\n    };\r\n\r\n    if(this.props.isChallenge){\r\n      console.log('isChallenge');\r\n      this.props.removeChallenge();\r\n    }\r\n    if(this.props.isRoom){\r\n      console.log('isRoom');\r\n      this.props.removeRoom();\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncomponentWillReceiveProps(nextProps) {\r\n  if (nextProps.auth.isChallenge && nextProps.auth.isRoom && this.state.isGameReady) {\r\n    this.props.history.push(\"/challengePage\"); // push user to challengepage when challenge is ready\r\n  }\r\n  /*if (nextProps.errors) {\r\n    this.setState({\r\n      errors: nextProps.errors\r\n    });\r\n  }*/\r\n}\r\n\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n\r\n\r\n  getData = rooms => {\r\n    this.setState({lobbies: rooms});\r\n  }\r\n\r\n  changeLobbies = () => socket.emit(\"getLobbies\");\r\n\r\n  getNamesToLobbies = namesToLobbies => {\r\n    this.setState({namesToLobbies: namesToLobbies});\r\n  }\r\n\r\n\r\n  getGames = event => {\r\n    console.log(socket);\r\n\r\n\r\n    socket.emit(\"getLobbies\");\r\n    socket.on(\"lobbies\", this.getData);\r\n    socket.on('namesToLobbies', this.getNamesToLobbies);\r\n\r\n    var row;\r\n    var button;\r\n    var room;\r\n    var userName;\r\n    var rank;\r\n\r\n    var buttonCell;\r\n    var roomCell;\r\n    var userCell;\r\n    var rankCell;\r\n\r\n    var table = document.getElementById(\"lobbyTable\");\r\n    table.style = \"border: 1px solid black; padding: 10px;\";\r\n    table.textContent = '';\r\n\r\n    row = table.insertRow(-1);\r\n\r\n    row.height = \"30px\";\r\n\r\n    roomCell = row.insertCell(-1);\r\n    userCell = row.insertCell(-1);\r\n    rankCell = row.insertCell(-1);\r\n    buttonCell = row.insertCell(-1);\r\n\r\n    button = document.createElement('text');\r\n    room = document.createElement('text');\r\n    userName = document.createElement('text');\r\n    rank = document.createElement('text');\r\n\r\n    button.type = 'text';\r\n    room.type = 'text';\r\n    userName.type = 'text';\r\n    rank.type = 'text';\r\n\r\n    button.style = \"font-size: 25px;\";\r\n    room.style = \"font-size: 25px;\";\r\n    userName.style = \"font-size: 25px;\";\r\n    rank.style = \"font-size: 25px;\";\r\n\r\n    room.textContent = \"Lobby Name\";\r\n    userName.textContent = \"Username\";\r\n    rank.textContent = \"Rank\";\r\n    button.textContent = \"Click to Join\";\r\n\r\n    buttonCell.appendChild(button);\r\n    roomCell.appendChild(room);\r\n    userCell.appendChild(userName);\r\n    rankCell.appendChild(rank);\r\n\r\n    var max = 0;\r\n\r\n    if(this.state.lobbies.length <10){\r\n      max = this.state.lobbies.length;\r\n    }\r\n\r\n    else{\r\n      max = 10;\r\n    }\r\n\r\n    for(var i = 0; i<max; i++){\r\n\r\n\r\n      row = table.insertRow(-1);\r\n\r\n      row.height = \"30px\";\r\n\r\n      roomCell = row.insertCell(-1);\r\n      userCell = row.insertCell(-1);\r\n      rankCell = row.insertCell(-1);\r\n      buttonCell = row.insertCell(-1);\r\n\r\n\r\n      button = document.createElement('button');\r\n      room = document.createElement('text');\r\n      userName = document.createElement('text');\r\n      rank = document.createElement('text');\r\n\r\n      button.type = 'button';\r\n      room.type = 'text';\r\n      userName.type = 'text';\r\n      rank.type = 'text';\r\n\r\n      button.className = \"btn blue darken-3 waves-effect waves-light\";\r\n      room.style = \"font-size: 20px;\";\r\n      userName.style = \"font-size: 20px\";\r\n      rank.style = \"font-size: 20px\";\r\n\r\n      room.textContent = this.state.lobbies[i].room.split(\"/\")[0];\r\n\r\n      try{\r\n      userName.textContent = this.state.namesToLobbies[i].name;\r\n      rank.textContent = this.getRank(this.state.namesToLobbies[i].rank);\r\n      }\r\n      catch(err){\r\n        userName.textContent = 'Refresh to view';\r\n        rank.textContent = 'Refresh to view';\r\n      }\r\n      button.textContent = \"Join\";\r\n\r\n      button.value = this.state.lobbies[i].room;\r\n      button.onclick = this.joinGame;\r\n\r\n      if(this.state.isLobbyCreated || this.state.lobbies[i].user===socket.id){\r\n        button.disabled = true;\r\n      }\r\n\r\n      buttonCell.appendChild(button);\r\n      roomCell.appendChild(room);\r\n      userCell.appendChild(userName);\r\n      rankCell.appendChild(rank);\r\n\r\n    }\r\n\r\n    var pageButtons = document.getElementById(\"pageButtons\");\r\n    pageButtons.textContent = '';\r\n    row = pageButtons.insertRow(-1);\r\n\r\n    var i = 0;\r\n    while(i*10<this.state.lobbies.length){\r\n      buttonCell = row.insertCell(-1);\r\n      button = document.createElement('button');\r\n      buttonCell.width = \"20px\";\r\n      button.type = 'button';\r\n      button.textContent = i+1;\r\n      button.value = i + 1;\r\n      buttonCell.onclick = this.getPageOfLobbies;\r\n      buttonCell.appendChild(button);\r\n      i++;\r\n      \r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  getPageOfLobbies = event => {\r\n\r\n    var page = event.target.value;\r\n\r\n    var row;\r\n    var button;\r\n    var room;\r\n    var userName;\r\n    var rank;\r\n\r\n    var buttonCell;\r\n    var roomCell;\r\n    var userCell;\r\n    var rankCell;\r\n\r\n    var table = document.getElementById(\"lobbyTable\");\r\n    table.style = \"border: 1px solid black; padding: 10px;\";\r\n    table.textContent = '';\r\n\r\n\r\n    row = table.insertRow(-1);\r\n    row.height = \"5vh\";\r\n\r\n    roomCell = row.insertCell(-1);\r\n    userCell = row.insertCell(-1);\r\n    rankCell = row.insertCell(-1);\r\n    buttonCell = row.insertCell(-1);\r\n\r\n    button = document.createElement('text');\r\n    room = document.createElement('text');\r\n    userName = document.createElement('text');\r\n    rank = document.createElement('text');\r\n\r\n    button.type = 'text';\r\n    room.type = 'text';\r\n    userName.type = 'text';\r\n    rank.type = 'text';\r\n\r\n    button.style = \"font-size: 25px;\";\r\n    room.style = \"font-size: 25px;\";\r\n    userName.style = \"font-size: 25px;\";\r\n    rank.style = \"font-size: 25px;\";\r\n\r\n    room.textContent = \"Lobby Name\";\r\n    userName.textContent = \"Username\";\r\n    rank.textContent = \"Rank\";\r\n    button.textContent = \"Click to Join\";\r\n\r\n    buttonCell.appendChild(button);\r\n    roomCell.appendChild(room);\r\n    userCell.appendChild(userName);\r\n    rankCell.appendChild(rank);\r\n\r\n    var max = 0;\r\n\r\n    if(this.state.lobbies.length < 10 * page){\r\n      max = this.state.lobbies.length;\r\n    }\r\n\r\n    else{\r\n      max = 10 * page;\r\n    }\r\n\r\n    for(var i = (page-1) * 10; i<max; i++){\r\n\r\n      row = table.insertRow(-1);\r\n      roomCell = row.insertCell(-1);\r\n      userCell = row.insertCell(-1);\r\n      rankCell = row.insertCell(-1);\r\n      buttonCell = row.insertCell(-1);\r\n\r\n\r\n      button = document.createElement('button');\r\n      room = document.createElement('text');\r\n      userName = document.createElement('text');\r\n      rank = document.createElement('text');\r\n\r\n      button.type = 'button';\r\n      room.type = 'text';\r\n      userName.type = 'text';\r\n      rank.type = 'text';\r\n\r\n      button.className = \"btn blue darken-3 waves-effect waves-light\";\r\n      room.style = \"font-size: 20px;\";\r\n      userName.style = \"font-size: 20px\";\r\n      rank.style = \"font-size: 20px\";\r\n\r\n      room.textContent = this.state.lobbies[i].room.split(\"/\")[0];\r\n\r\n      try{\r\n      userName.textContent = this.state.namesToLobbies[i].name;\r\n      rank.textContent = this.getRank(this.state.namesToLobbies[i].rank);\r\n      }\r\n      catch(err){\r\n        userName.textContent = 'Refresh to view';\r\n        rank.textContent = 'Refresh to view';\r\n      }\r\n      button.textContent = \"Join\";\r\n\r\n      button.value = this.state.lobbies[i].room;\r\n      button.onclick = this.joinGame;\r\n\r\n      if(this.state.lobbies[i].user===socket.id){\r\n        button.disabled = true;\r\n      }\r\n\r\n      buttonCell.appendChild(button);\r\n      roomCell.appendChild(room);\r\n      userCell.appendChild(userName);\r\n      rankCell.appendChild(rank);\r\n\r\n    }\r\n\r\n    var pageButtons = document.getElementById(\"pageButtons\");\r\n    pageButtons.textContent = '';\r\n    row = pageButtons.insertRow(-1);\r\n\r\n    var i = 0;\r\n    while(i*10<this.state.lobbies.length){\r\n      buttonCell = row.insertCell(-1);\r\n      button = document.createElement('button');\r\n      buttonCell.width = \"20px\";\r\n      button.type = 'button';\r\n      button.textContent = i+1;\r\n      button.value = i;\r\n      buttonCell.onclick = this.getPageOfLobbies;\r\n      buttonCell.appendChild(button);\r\n      i++;\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  createLobby = (name, rank) => event => {\r\n\r\n    console.log((this.props.auth.user.coolDownEnd- (new Date().getTime())));\r\n    console.log(this.props.auth.user.isCoolDown);\r\n    console.log(this.props.auth.user.name);\r\n\r\n    if(this.state.isQueued){\r\n      this.showIsQueuedAlert();\r\n    }\r\n\r\n    else if(this.props.auth.user.isCoolDown && (this.props.auth.user.coolDownEnd- (new Date().getTime())>0)){\r\n      \r\n        this.showCoolDownWaitModal();\r\n    }\r\n    \r\n    else{  \r\n      if(this.props.auth.user.isCoolDown){\r\n        this.props.endCoolDown();\r\n      }\r\n      \r\n      console.log(this.props.room);\r\n      document.getElementById(\"createLobbyButton\").disabled = true;\r\n      document.getElementById(\"destroyLobbyButton\").disabled = false;\r\n      if(this.state.isLobbyCreated){\r\n        \r\n        \r\n      }\r\n      else{\r\n          \r\n\r\n          const ID = 100 + Math.floor(Math.random() * 10) +1;\r\n\r\n          console.log(ID);\r\n\r\n          socket.emit(\"createGame\", {name: name, rank: rank, ID: ID }); //create room from challenge ID\r\n\r\n          socket.on('newGame', (data) => {  \r\n            this.setState({isLobbyCreated: true});\r\n            this.setState({lobby: data.room});\r\n\r\n\r\n            this.props.setCurrentRoom({ room: data.room });\r\n            this.props.challengeUser({ ID: data.room.split('/')[1] });\r\n            this.props.setIsCompetitive({name: this.props.auth.user.name, isCompetitive: false});\r\n          \r\n            this.showCreateModal();\r\n            console.log('set');\r\n          \r\n        })\r\n\r\n\r\n        socket.on('joinerReady', (data) => {\r\n          this.showCheckInModal();\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\njoinGame = (event) => {\r\n\r\n\r\n  var room = event.target.value;\r\n\r\n  if(this.state.isQueued){\r\n    this.showIsQueuedAlert();\r\n  }\r\n\r\n  else if(this.props.auth.user.isCoolDown && (this.props.auth.user.coolDownEnd- (new Date().getTime())>0)){    \r\n    this.showCoolDownWaitModal();\r\n  }\r\n\r\n  else{\r\n    if(this.props.auth.user.isCoolDown){\r\n      this.props.endCoolDown();\r\n    }\r\n\r\n    console.log(room);\r\n\r\n    var DI = room.split(\"/\")[1];\r\n    console.log(DI);\r\n    console.log(room.split('/')[1]);\r\n    socket.emit(\"gameJoin\", {room: room});\r\n\r\n    socket.on('isJoinSuccessful', (data) => {\r\n      if(data.success){\r\n        this.showJoinGameModal();\r\n        console.log('roomNotFull');\r\n        console.log(DI);\r\n        console.log(room);\r\n\r\n        this.props.challengeUser({ ID: room.split('/')[1] });\r\n  \r\n        this.props.setCurrentRoom({ room: room });\r\n\r\n        this.props.setIsCompetitive({name: this.props.auth.user.name, isCompetitive: false});\r\n\r\n        console.log(room);\r\n\r\n        socket.emit('joinerReady', { room: room });\r\n        socket.on('creatorReady', () => {\r\n          console.log('creatorready');\r\n          this.setState({isGameReady: true});\r\n          this.props.history.push('/challengePage');\r\n\r\n        })\r\n\r\n        socket.on('creatorDidntCheckIn', () => {\r\n          this.showCreaterDidntConfirmModal();\r\n          socket.emit('leaveAsCreatorDidntCheck', {room: room});\r\n          this.props.removeChallenge();\r\n          this.props.removeRoom();\r\n        })\r\n\r\n      }\r\n\r\n      else if(!data.success){\r\n        this.showGameFullModal();\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n\r\n}\r\n\r\ndestroyLobby = (event) => {\r\n  this.setState({isLobbyCreated: false, lobby: ''});\r\n  socket.emit(\"joinGameAfterCreateGame\", { user: this.props.auth.name, room: this.props.room.room });\r\n  this.props.removeRoom();\r\n  this.props.removeChallenge();\r\n  document.getElementById(\"destroyLobbyButton\").disabled = true;\r\n  document.getElementById(\"createLobbyButton\").disabled = false;\r\n\r\n\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n  this.getRank();\r\n  console.log(this.props.challenge);\r\n  console.log(this.props.room);\r\n  if(this.props.isChallenge){\r\n    console.log('remove');\r\n      this.props.removeChallenge();\r\n  }\r\n\r\n  if(this.props.isRoom){\r\n      console.log('remove');\r\n      socket.emit(\"opponentLeft\", {room: this.props.room});\r\n      this.props.removeRoom();\r\n  }\r\n\r\n  console.log(this.props.challenge);\r\n  console.log(this.props.room);\r\n  /*this.peopleNumInterval = setInterval(()=> { \r\n    socket.emit(\"getNumOfPeopleQueuing\");\r\n    socket.on(\"numOfPeopleQueuing\", (data) => {\r\n      this.setState({peopleInQueue: data.num});\r\n    })\r\n  }, 4000);*/\r\n  this.getGames();\r\n\r\n  socket.emit(\"endCompSearch\", { name: this.props.auth.user.name });\r\n\r\n  //window.addEventListener(\"beforeunload\", this.endCompQueue);\r\n}\r\n\r\n/*componentWillUnmount(){\r\n  window.removeEventListener(\"beforeunload\", this.endCompQueue);\r\n}*/\r\n\r\n/*unload = (event) => {\r\n  console.log('hi');\r\n  console.log(this.props.auth.user.name);\r\n  console.log(socket.id);\r\n  socket.emit(\"endCompSearch\", { name: this.props.auth.user.name });\r\n  event.returnValue = \"hi\";\r\n\r\n}*/\r\n\r\ngetRank = (rank) => {\r\n  console.log(this.props.auth.user.rank);\r\n  var str;\r\n  //const rank = this.props.auth.user.rank;\r\n\r\n  if((rank/100 | 0)===1){\r\n    str = 'Wood ';\r\n  }\r\n  else if((rank/100 | 0)===2){\r\n    str = 'Bronze ';\r\n  }\r\n  else if((rank/100 | 0)===3){\r\n    str = 'Silver ';\r\n  }\r\n  else if((rank/100 | 0)===4){\r\n    str = 'Gold ';\r\n  }\r\n  else if((rank/100 | 0)===5){\r\n    str = 'Platinum ';\r\n  }\r\n  else if((rank/100 | 0)===6){\r\n    str = 'Diamond ';\r\n  }\r\n  else{\r\n    str = 'Global Elite ';\r\n  }\r\n\r\n  if(rank % 100 <=25){\r\n    str = str + \"1\"\r\n  }\r\n  else if(rank % 100 <=50){\r\n    str = str + \"2\"\r\n  }\r\n  else if(rank % 100 <=75){\r\n    str = str + \"3\"\r\n  }\r\n  else {\r\n    str = str + \"4\";\r\n  }\r\n\r\n  return str;\r\n  //this.setState({userRank: str});\r\n}\r\n\r\n showCreateModal = () => {\r\n    console.log('show');\r\n    this.setState({showCreate: true});\r\n  }\r\n\r\n closeCreateModal = () => {\r\n   this.setState({showCreate: false});\r\n }\r\n\r\n showCheckInModal = () => {\r\n  console.log('show');\r\n  this.setState({showCheckIn: true});\r\n}\r\n\r\ncloseCheckInModal = () => {\r\n this.setState({showCheckIn: false});\r\n}\r\n\r\nshowJoinGameModal = () => {\r\n  console.log('show');\r\n  this.setState({showJoinGame: true});\r\n}\r\n\r\ncloseJoinGameModal = () => {\r\n this.setState({showJoinGame: false});\r\n}\r\n\r\nshowCreaterDidntConfirmModal = () => {\r\n  console.log('show');\r\n  this.setState({showCreaterDidntConfirm: true});\r\n}\r\n\r\ncloseCreaterDidntConfirmModal = () => {\r\n this.setState({showCreaterDidntConfirm: false});\r\n}\r\n\r\nshowGameFullModal = () => {\r\n  console.log('show');\r\n  this.setState({showGameFull: true});\r\n}\r\n\r\ncloseGameFullModal = () => {\r\n this.setState({showGameFull: false});\r\n}\r\n\r\nshowCoolDownWaitModal = () => {\r\n  console.log('show');\r\n  this.setState({showCoolDownWait: true});\r\n}\r\n\r\ncloseCoolDownWaitModal = () => {\r\n this.setState({showCoolDownWait: false});\r\n}\r\n\r\nshowConfirmCompModal = () => {\r\n  this.setState({showConfirmComp: true});\r\n}\r\n\r\ncloseIsQueuedAlert = () => {\r\n  this.setState({showIsQueued: false});\r\n }\r\n \r\n showIsQueuedAlert = () => {\r\n   this.setState({showIsQueued: true});\r\n }\r\n\r\ncreaterCheckedIn = () => {\r\n  console.log('ready');\r\n  console.log(this.props.room.room);\r\n  socket.emit('beginGame', {room: this.props.room.room});\r\n  this.setState({isGameReady: true});\r\n  this.props.history.push('/challengePage');\r\n}\r\n\r\ncompCheckIn = () => {\r\n  socket.emit(\"compCheckedIn\", { room: this.props.room.room });\r\n  this.setState({isCheckedIn: true});\r\n  if(this.state.isOpponentCheckedIn){\r\n    console.log('their checked in')\r\n    this.setState({isGameReady: true});\r\n    this.props.history.push('/challengePage');\r\n  }\r\n}\r\n\r\ntimesUp = () => {\r\n  this.props.removeChallenge();\r\n  this.props.removeRoom();\r\n  socket.emit('checkInNoGood', { room: this.props.room.room });\r\n}\r\n\r\ncompTimesUp = () => {\r\n  this.props.removeChallenge();\r\n  this.props.removeRoom();\r\n  socket.emit(\"compTimesUp\", {room: this.props.room.room});\r\n\r\n  this.setState({isQueued: false});\r\n}\r\n\r\ncompQueue = (event) => {\r\n  event.preventDefault();\r\n  console.log(\"compQueuecalled\");\r\n  document.getElementById(\"startCompSearchButton\").disabled = true;\r\n  document.getElementById(\"endCompSearchButton\").disabled = false;\r\n  this.setState({isQueued: true});\r\n\r\n  var time = (new Date().getTime())/1000;\r\n\r\n  console.log(time);\r\n  socket.emit(\"compQueue\", {name: this.props.auth.user.name, rank: this.props.auth.user.rank, time: time, socketID: socket.id});\r\n\r\n  socket.emit(\"getNumberOfPeopleQueuing\");\r\n  socket.on(\"numberOfPeopleQueuing\", (data) => {\r\n    document.getElementById(\"tellNumOfPplInQueue\").textContent = \"There are currently \" + data.num + \" people queued up\"\r\n  })\r\n\r\n  this.peopleQueuingInterval = setInterval(() => {\r\n    socket.emit(\"getNumberOfPeopleQueuing\");\r\n    socket.on(\"numberOfPeopleQueuing\", (data) => {\r\n      document.getElementById(\"tellNumOfPplInQueue\").textContent = \"There are currently \" + data.num + \" people queued up\"\r\n    })\r\n  }, 3000); \r\n\r\n  this.queueInterval = setInterval(()=> { \r\n    console.log('interval');\r\n      socket.emit(\"checkPriorityQueue\", {name: this.props.auth.user.name, rank: this.props.auth.user.rank, time: time});\r\n    }, 5000);\r\n\r\n  socket.on(\"foundPerson\", (data) => {\r\n    console.log('foundPerson');\r\n    clearInterval(this.queueInterval);\r\n    clearInterval(this.peopleQueuingInterval);\r\n    document.getElementById(\"tellNumOfPplInQueue\").textContent = \"\";\r\n\r\n    const ID = 100 + Math.floor(Math.random() * 8) + 1;\r\n    socket.emit(\"queueCreateLobby\", { index: data.index, challengeID: ID, name: this.props.auth.user.name });\r\n    socket.on(\"compRoomCreated\", (data)=> {\r\n      console.log(data.challengeID);\r\n      this.props.challengeUser({ID: data.challengeID});\r\n      this.props.setCurrentRoom({room: data.room });\r\n      this.props.setIsCompetitive({name: this.props.auth.user.name, isCompetitive: true});\r\n\r\n      this.showConfirmCompModal();\r\n      socket.on(\"opponentCheckedIn\", () => {\r\n        console.log(\"opponentCheckedIn\");\r\n        this.setState({isOpponentCheckedIn: true});\r\n        if(this.state.isCheckedIn){\r\n          console.log(\"im checked in\");\r\n          this.setState({isGameReady: true});\r\n          this.props.history.push('/challengePage');\r\n        }\r\n      })\r\n\r\n    })\r\n  })  \r\n\r\n  socket.on(\"personFoundYou\", (data) => {\r\n    console.log('found');\r\n    clearInterval(this.queueInterval);\r\n\r\n    clearInterval(this.peopleQueuingInterval);\r\n    document.getElementById(\"tellNumOfPplInQueue\").textContent = \"\";\r\n\r\n    socket.on(\"compRoomCreated\", (data) =>{\r\n      console.log(data.challengeID);\r\n      this.props.challengeUser({ID: data.challengeID});\r\n      this.props.setCurrentRoom({ room: data.room });\r\n      this.props.setIsCompetitive({name: this.props.auth.user.name, isCompetitive: true});\r\n\r\n      this.showConfirmCompModal();\r\n\r\n      socket.on(\"opponentCheckedIn\", () => {\r\n        this.setState({isOpponentCheckedIn: true});\r\n        if(this.state.isCheckedIn){\r\n          console.log('im checked in');\r\n          this.setState({isGameReady: true});\r\n          this.props.history.push('/challengePage');\r\n        }\r\n      })\r\n    })\r\n  })  \r\n}\r\n\r\nendCompQueue = (event) => {\r\n  event.preventDefault();\r\n\r\n\r\n  socket.emit(\"endCompSearch\", {name: this.props.auth.user.name});\r\n  clearInterval(this.queueInterval);\r\n  clearInterval(this.peopleQueuingInterval);\r\n\r\n  document.getElementById(\"tellNumOfPplInQueue\").textContent = \"\";\r\n  this.setState({isQueued: false});\r\n\r\n  document.getElementById(\"startCompSearchButton\").disabled = false;\r\n  document.getElementById(\"endCompSearchButton\").disabled = true;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nrender() {\r\n    const { user } = this.props.auth;\r\n\r\n  return (\r\n    <div className = \"dashboardbg\">\r\n\r\n      <div style = {{width: \"90vw\", margin: \"auto\"}}>\r\n    \r\n      <Alert  \r\n        show = {this.state.showCreate} \r\n        onHide = {this.closeCreateModal}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            You have created a lobby!\r\n          </Alert.Heading>\r\n          <p>\r\n              Your lobby name is {this.state.lobby}\r\n          </p>\r\n          <hr/>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeCreateModal}>OK</Button>\r\n\r\n          </div>\r\n\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showCheckIn} \r\n        onHide = {this.closeCheckInModal}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n              Someone has joined your lobby!\r\n          </Alert.Heading>\r\n          <p>\r\n              Please hit the button below to confirm, and start the match!\r\n          </p>\r\n          <hr/>\r\n          <div className = \"d-flex justify-content-start\">\r\n            <CheckInTimer timesUp = {this.timesUp}></CheckInTimer>\r\n          </div>              \r\n          <div className = \"d-flex justify-content-end\">\r\n              <Button onClick = {this.createrCheckedIn}>Join</Button>\r\n          </div>\r\n\r\n        </Alert>\r\n\r\n        <Alert \r\n        show = {this.state.showJoinGame} \r\n        onHide = {this.closeJoinGameModal}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            You have requested to join this game\r\n          </Alert.Heading>\r\n          <p>Just waiting for the creator to confirm...</p>\r\n            <hr/>\r\n\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeJoinGameModal}>OK</Button>\r\n          </div>\r\n\r\n\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showGameFull} \r\n        onHide = {this.closeGameFullModal}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            This game is now full\r\n          </Alert.Heading>\r\n          <p>\r\n            Sorry, hit refresh to get the most updated list of games\r\n          </p>\r\n          <hr/>\r\n\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeGameFullModal}>OK</Button>\r\n          </div>\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showCreaterDidntConfirm} \r\n        onHide = {this.closeCreaterDidntConfirm}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            The other player failed to confirm the game\r\n          </Alert.Heading>\r\n\r\n          <p>\r\n            Either join another game, or start one yourself!\r\n          </p>\r\n          <hr/>\r\n\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeCreaterDidntConfirmModal}>OK</Button>\r\n            </div>\r\n\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showCoolDownWait} \r\n        onHide = {this.closeCoolDownWait}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            You are still cooling down from a match abandon\r\n          </Alert.Heading>\r\n\r\n          <p>\r\n            Please wait another {(this.props.auth.user.coolDownEnd - (new Date().getTime()))/1000} seconds\r\n          </p>\r\n          <hr/>\r\n\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeCoolDownWaitModal}>OK</Button>\r\n          </div>\r\n\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showConfirmComp} \r\n        variant = \"info\"\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n              A game has been found!\r\n          </Alert.Heading>\r\n          <p>\r\n              Please hit the button below to confirm, and start the match!\r\n          </p>\r\n          <hr/>\r\n          <div className = \"d-flex justify-content-start\">\r\n            <CompTimer timesUp = {this.compTimesUp}></CompTimer>\r\n          </div>              \r\n          <div className = \"d-flex justify-content-end\">\r\n              <Button onClick = {this.compCheckIn}>Join</Button>\r\n          </div>\r\n\r\n        </Alert>\r\n\r\n        <Alert  \r\n        show = {this.state.showIsQueued} \r\n        onHide = {this.closeIsQueuedAlert}\r\n        variant = \"info\"\r\n        dismissable\r\n        style={{position: \"fixed\", zIndex: \"1\", width: \"80vw\"}}>\r\n          <Alert.Heading>\r\n            You can't create join a casual lobby when in line for a competitive game!\r\n          </Alert.Heading>\r\n\r\n          <p>\r\n            If you'd like to play a casual game instead, you can end your competitive search...\r\n          </p>\r\n          <hr/>\r\n\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button onClick = {this.closeIsQueuedAlert}>OK</Button>\r\n            </div>\r\n\r\n        </Alert>\r\n\r\n        <div className=\"row\" style = {{ height: \"3vh\" }}>\r\n\r\n\r\n          <div className = \"col sm\">\r\n          <text\r\n              style={{\r\n                fontFamily: \"monospace\",\r\n                fontSize: \"30px\",\r\n                textAlign: \"center\"\r\n              }}\r\n              className=\"brand-logo black-text\"\r\n            >\r\n              <i className=\"material-icons\">code</i>\r\n                CompCoder\r\n            </text>\r\n          </div>\r\n          </div>\r\n          <hr></hr>\r\n          <div className = \"row d-flex\" style = {{ height: \"5vh\" }}>\r\n            <div className = \"mr-auto\">\r\n            <Button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n                backgroundColor: \"rgb(71, 214, 114)\"\r\n              }}\r\n\r\n\r\n              onClick={this.onLogoutClick}\r\n            >\r\n              Logout\r\n            </Button>\r\n            </div>\r\n\r\n            <div className = \"ml-auto\">\r\n              <text>\r\n                <b>{user.name.split(\" \")[0]}</b>, {this.getRank(this.props.auth.user.rank)}\r\n              </text>\r\n\r\n            </div>\r\n          </div>  \r\n\r\n          <div className = \"row\" style = {{height: \"40vh\"}}>\r\n            <div className = \"col-sm\" style = {{border: \"1px solid black\", marginRight: \"8px\", backgroundColor: \"rgba(153, 255, 255, 0.2)\"}}>\r\n\r\n                <div className = \"row justify-content-center\" style = {{height: \"4vh\"}}>\r\n                  <h3>\r\n                    Welcome, to the gauntlet...\r\n                  </h3>\r\n                </div>\r\n                <div className = \"row justify-content-left\" style = {{ height: \"15vh\" }}>\r\n                  <p class = \"tieReminder\">\r\n                    -Compete 1-on-1 against others in real time on a variety of programming problems.<br></br><br></br>\r\n                    -To the right, you'll see you can queue up for a competitive game against people of similar skills.<br></br><br></br>\r\n                    -Want a laid back game? Below you'll see casual games, where you can either create or join a lobby to play with somebody, or add a friend, and play with them instead</p>\r\n                </div>\r\n          </div>\r\n\r\n            <div className = \"col-sm\" style = {{border: \"1px solid black\", marginLeft: \"8px\", marginBottom: \"10vh\", backgroundColor: \"rgba(153, 255, 255, 0.2)\"}}>\r\n              <div className = \"row justify-content-center\" style = {{height: \"8vh\"}}>\r\n                <text class = \"compTitle\">\r\n                  <b>Feeling confident? Play competitive to queue up with people of a similar rank!</b>\r\n                </text>\r\n              </div>\r\n\r\n              <div className = \"d-flex row\" style = {{height: \"6vh\"}}>\r\n                <div className = \"mr-auto\" style ={{marginLeft: \"5vw\"}}>\r\n                  <Button \r\n                  id= \"startCompSearchButton\"\r\n                  onClick ={this.compQueue}\r\n                  style = {{\r\n                  backgroundColor: \"rgb(71, 214, 114)\",\r\n                  width: \"15vw\"}}>\r\n                    Queue\r\n                  </Button>\r\n                  </div>\r\n\r\n                  <div className = \"ml-auto\" style ={{marginRight: \"5vw\"}}>\r\n                    <Button \r\n                    id=\"endCompSearchButton\"\r\n                    onClick = {this.endCompQueue}\r\n                    style = {{\r\n                    backgroundColor: \"rgb(185, 82, 100)\",\r\n                    width: \"15vw\"}}>\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n\r\n\r\n\r\n              </div>\r\n\r\n              <div className = \"d-flex row justify-content-center\" style = {{height: \"4vh\"}}>\r\n                  <text id = \"tellNumOfPplInQueue\">\r\n                    \r\n                  </text>\r\n              </div>\r\n\r\n              <div className = \"d-flex row justify-content-center\" style = {{height: \"8vh\"}}>\r\n                  <BarLoader color = \"#66ff66\" loading = {this.state.isQueued} size = {100}/>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n            \r\n            \r\n\r\n            \r\n          <div className = \"row justify-content-center\">\r\n            <h4>\r\n              <br></br><hr></hr><br></br>\r\n              Join a casual game</h4>\r\n          </div>\r\n\r\n          <div className=\"row d-flex\">\r\n            <div class =\"mr-auto\">\r\n              <Button\r\n                style={{\r\n                  width: \"100px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  marginTop: \"1rem\",\r\n                  float: \"left\"\r\n                }}\r\n                onClick={this.getGames}\r\n              >\r\n                  Refresh\r\n              </Button>\r\n              </div>\r\n\r\n              <div class =\"ml-auto\">\r\n              <Button\r\n              style={{\r\n                width: \"100px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              onClick={this.createLobby(user.name, user.rank)}\r\n              id = \"createLobbyButton\"\r\n              \r\n              >\r\n                  Create\r\n              </Button>\r\n            \r\n            \r\n              <Button \r\n              id = \"destroyLobbyButton\"\r\n              style={{\r\n                width: \"100px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              \r\n              onClick={this.destroyLobby}\r\n              >\r\n                Leave\r\n              </Button>\r\n              </div>\r\n            \r\n          </div>\r\n            <h5> </h5>\r\n\r\n            <div className=\"row justify-content-center\" style = {{height: \"65vh\"}}>\r\n              <div style = {{width: \"93vw\"}}>\r\n              <table id=\"lobbyTable\" className = \"bordered\" style ={{border: \"1px solid black\", padding: \"10px\"}} >\r\n              </table>\r\n              \r\n              \r\n            \r\n            </div>\r\n            <div className = \"col sm\">\r\n              <table id = \"pageButtons\">\r\n\r\n              </table>\r\n            </div>\r\n            </div>\r\n\r\n          <div className = \"d-flex row justify-content-center\" style = {{height: \"8vh\"}}>\r\n\r\n            <p className=\"bottomText\" style = {{width: \"100vw\"}}>\r\n              <hr></hr>\r\n              This site was created by Jacob Richichi<br></br>\r\n            </p>\r\n          </div>  \r\n          <div className = \"d-flex row justify-content-center\" style = {{height: \"5vh\"}}>\r\n            <Link to = \"/bugReport\">\r\n              <p className=\"bottomText\">\r\n                Found a bug? Click here to let me know!\r\n              </p>\r\n            </Link>\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  endCoolDown: PropTypes.func.isRequired,\r\n  setIsCompetitive: PropTypes.func.isRequired,\r\n\r\n  challengeUser: PropTypes.func.isRequired,\r\n  setCurrentRoom: PropTypes.func.isRequired,\r\n  removeChallenge: PropTypes.func.isRequired,\r\n  removeRoom: PropTypes.func.isRequired,\r\n\r\n  isChallenge: PropTypes.bool.isRequired,\r\n  isRoom: PropTypes.bool.isRequired,\r\n\r\n  auth: PropTypes.object.isRequired,\r\n  challenge: PropTypes.object.isRequired,\r\n  room: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  challenge: state.auth.challenge,\r\n  isChallenge: state.auth.isChallenge,\r\n\r\n  room: state.auth.room,\r\n  isRoom: state.auth.isRoom\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser, challengeUser, setCurrentRoom, removeChallenge, removeRoom, endCoolDown, setIsCompetitive }\r\n)(Dashboard);","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\auth\\Login.js",["137"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport \"./auth.css\";\r\nimport Button from \"react-bootstrap\";\r\n\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {},\r\n      challenge: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\"); // push user to dashboard when they login\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    e.preventDefault();\r\n    const userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\n    this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n      <div className=\"authbg\">\r\n        <div className=\"container\">\r\n        <div style={{ height: \"10vh\" }} className=\"row\">\r\n          <div className = \"col sm\">\r\n          <text\r\n              style={{\r\n                fontFamily: \"monospace\",\r\n                fontSize: \"30px\"\r\n              }}\r\n              className=\"brand-logo black-text\"\r\n            >\r\n              <i className=\"material-icons\">code</i>\r\n                CompCoder\r\n                <br></br><br></br><br></br>\r\n            </text>\r\n\r\n          </div>\r\n          </div>\r\n\r\n          <div style={{ height: \"10vh\" }} className=\"row\">\r\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\r\n              home\r\n            </Link>\r\n            </div>\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Login</b> below\r\n              </h4>\r\n              <p className=\"grey-text text-darken-1\">\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email || errors.emailnotfound\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">\r\n                  {errors.email}\r\n                  {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password || errors.passwordincorrect\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">\r\n                  {errors.password}\r\n                  {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Login\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          </div>\r\n        \r\n        \r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\actions\\types.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\Timer.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\CompTimer.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\components\\dashboard\\CheckInTimer.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\index.js",[],"C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\errorReducer.js",["138"],"import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","C:\\Users\\Owner\\Desktop\\mern3\\client\\src\\reducers\\authReducer.js",["139"],"import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING,\r\n    SET_CHALLENGE,\r\n    SET_ROOM\r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false,\r\n    challenge: {},\r\n    isChallenge: false,\r\n    room: '',\r\n    isRoom: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n\r\n      case SET_CHALLENGE:\r\n        return {\r\n          ...state,\r\n          isChallenge: !isEmpty(action.payload),\r\n          challenge: action.payload\r\n        };\r\n\r\n        case SET_ROOM:\r\n          return {\r\n            ...state,\r\n            isRoom: !isEmpty(action.payload),\r\n            room: action.payload\r\n          };\r\n          \r\n      default:\r\n        return state;\r\n    }\r\n  }",{"ruleId":"140","severity":1,"message":"141","line":1,"column":16,"nodeType":"142","messageId":"143","endLine":1,"endColumn":25},{"ruleId":"140","severity":1,"message":"144","line":8,"column":10,"nodeType":"142","messageId":"143","endLine":8,"endColumn":14},{"ruleId":"140","severity":1,"message":"145","line":12,"column":8,"nodeType":"142","messageId":"143","endLine":12,"endColumn":14},{"ruleId":"140","severity":1,"message":"146","line":16,"column":8,"nodeType":"142","messageId":"143","endLine":16,"endColumn":14},{"ruleId":"140","severity":1,"message":"147","line":10,"column":7,"nodeType":"142","messageId":"143","endLine":10,"endColumn":10},{"ruleId":"140","severity":1,"message":"148","line":4,"column":8,"nodeType":"142","messageId":"143","endLine":4,"endColumn":14},{"ruleId":"140","severity":1,"message":"144","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":14},{"ruleId":"149","severity":1,"message":"150","line":216,"column":9,"nodeType":"142","messageId":"151","endLine":216,"endColumn":19},{"ruleId":"140","severity":1,"message":"152","line":231,"column":13,"nodeType":"142","messageId":"143","endLine":231,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":242,"column":17,"nodeType":"142","messageId":"155","endLine":242,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":345,"column":261,"nodeType":"158","messageId":"159","endLine":345,"endColumn":262},{"ruleId":"140","severity":1,"message":"160","line":411,"column":13,"nodeType":"142","messageId":"143","endLine":411,"endColumn":22},{"ruleId":"140","severity":1,"message":"161","line":412,"column":13,"nodeType":"142","messageId":"143","endLine":412,"endColumn":23},{"ruleId":"156","severity":1,"message":"157","line":418,"column":207,"nodeType":"158","messageId":"159","endLine":418,"endColumn":208},{"ruleId":"140","severity":1,"message":"162","line":489,"column":15,"nodeType":"142","messageId":"143","endLine":489,"endColumn":26},{"ruleId":"140","severity":1,"message":"152","line":497,"column":17,"nodeType":"142","messageId":"143","endLine":497,"endColumn":21},{"ruleId":"153","severity":1,"message":"154","line":507,"column":21,"nodeType":"142","messageId":"155","endLine":507,"endColumn":22},{"ruleId":"156","severity":1,"message":"157","line":622,"column":179,"nodeType":"158","messageId":"159","endLine":622,"endColumn":180},{"ruleId":"163","severity":1,"message":"164","line":707,"column":4,"nodeType":"165","messageId":"166","endLine":715,"endColumn":6},{"ruleId":"140","severity":1,"message":"167","line":784,"column":17,"nodeType":"142","messageId":"143","endLine":784,"endColumn":21},{"ruleId":"140","severity":1,"message":"168","line":844,"column":13,"nodeType":"142","messageId":"143","endLine":844,"endColumn":21},{"ruleId":"140","severity":1,"message":"169","line":11,"column":17,"nodeType":"142","messageId":"143","endLine":11,"endColumn":22},{"ruleId":"140","severity":1,"message":"170","line":11,"column":24,"nodeType":"142","messageId":"143","endLine":11,"endColumn":27},{"ruleId":"140","severity":1,"message":"171","line":11,"column":36,"nodeType":"142","messageId":"143","endLine":11,"endColumn":40},{"ruleId":"153","severity":1,"message":"172","line":214,"column":9,"nodeType":"142","messageId":"155","endLine":214,"endColumn":10},{"ruleId":"153","severity":1,"message":"172","line":349,"column":9,"nodeType":"142","messageId":"155","endLine":349,"endColumn":10},{"ruleId":"140","severity":1,"message":"148","line":8,"column":8,"nodeType":"142","messageId":"143","endLine":8,"endColumn":14},{"ruleId":"173","severity":1,"message":"174","line":3,"column":1,"nodeType":"175","endLine":10,"endColumn":2},{"ruleId":"173","severity":1,"message":"174","line":17,"column":3,"nodeType":"175","endLine":48,"endColumn":4},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'socket' is defined but never used.","'Navbar' is defined but never used.","'jwt' is assigned a value but never used.","'Button' is defined but never used.","no-use-before-define","'outputText' was used before it was defined.","usedBeforeDefined","'str5' is assigned a value but never used.","no-redeclare","'j' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'oppMemory' is assigned a value but never used.","'oppCorrect' is assigned a value but never used.","'timeElapsed' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'componentDidMount'.","MethodDefinition","unexpected","'room' is assigned a value but never used.","'selected' is assigned a value but never used.","'Modal' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'i' is already defined.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration"]